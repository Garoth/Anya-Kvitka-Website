#grid {
  /* We use 32px columns with 32px gutters. Therefore, everything snaps to a
   * simple 32px grid. So, to add simplicity and power, your "column width"
   * is just the column number times 32px. I.e.
   *
   * 1  | 2  | 3  | 4   | 5   | 6   | 7
   * ---|----|----|-----|-----|-----|----
   * 32 | 64 | 96 | 128 | 160 | 192 | 224
   *
   * This system below is, unfortunately, recursive (since Less has no loops).
   * The end result is classes like:
   *
   * .column1 { width: 32px }
   * .column2 { width: 64px }
   *
   * and so forth. Additionally, each column is set to inline-block. These
   * columns can be placed inside of a .row div to create breaks.
   */
  .core(@num-columns) {
    .column (@columns) {
      width: @column-width * @columns;
      .inline-block();
      vertical-align: top;
    }

    .columnX (@index) when (@index > 0) {
      (~".column@{index}") { .column(@index); }
      .columnX(@index - 1);
    }
    .columnX (0) {}

    .row {
      display: block;
      .clearfix();
    }

    .columnX(@num-columns);
  }
}

.grid-classes() {
  #grid > .core(32);
}
